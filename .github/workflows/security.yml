name: Security Scanning

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # Job 1: Code Security Scanning
  code-security:
    runs-on: ubuntu-latest
    name: Code Security Scanning
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        cd backend
        pip install -r requirements.txt
        
    # Bandit - Python security linter
    - name: Run Bandit security linter
      run: |
        pip install bandit
        cd backend
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -ll
        
    # Semgrep - Static analysis security testing
    - name: Run Semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/python
          p/owasp-top-ten
        generateSarif: "1"
        
    - name: Upload Semgrep results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: semgrep.sarif
      continue-on-error: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Job 2: Dependency Scanning
  dependency-scanning:
    runs-on: ubuntu-latest
    name: Dependency Scanning
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    # Safety - Check for known security vulnerabilities
    - name: Run Safety check
      run: |
        pip install safety
        cd backend
        safety check --json --output safety-report.json || true
        
    - name: Upload Safety report
      uses: actions/upload-artifact@v4
      with:
        name: safety-report
        path: backend/safety-report.json
        
    # Snyk - Advanced vulnerability scanning
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/python@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=medium --json-file-output=snyk-report.json
        
    - name: Upload Snyk report
      uses: actions/upload-artifact@v4
      with:
        name: snyk-report
        path: snyk-report.json
      continue-on-error: true

  # Job 3: Container Security Scanning
  container-security:
    runs-on: ubuntu-latest
    name: Container Security Scanning
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: flask-app:security-test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        load: true
        
    # Trivy - Container vulnerability scanner
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'flask-app:security-test'
        format: 'sarif'
        output: 'trivy-container-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
        
    - name: Upload Trivy container scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-container-results.sarif'
      continue-on-error: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    # Docker Scout - Docker security scanning
    - name: Run Docker Scout
      uses: docker/scout-action@v1
      with:
        command: cves
        image: flask-app:security-test
        format: sarif
        output: docker-scout-results.sarif
      continue-on-error: true
        
    - name: Upload Docker Scout results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'docker-scout-results.sarif'
      continue-on-error: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Job 4: Secret Scanning
  secret-scanning:
    runs-on: ubuntu-latest
    name: Secret Scanning
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    # TruffleHog - Secret scanning
    - name: Run TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: HEAD~1
        head: HEAD
        extra_args: --debug --only-verified
        
    # GitLeaks - Another secret scanning tool
    - name: Run GitLeaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
      continue-on-error: true

  # Job 5: Security Summary
  security-summary:
    runs-on: ubuntu-latest
    name: Security Summary
    needs: [code-security, dependency-scanning, container-security, secret-scanning]
    if: always()
    
    steps:
    - name: Security Summary
      run: |
        echo "üîí Security Scanning Summary"
        echo "================================"
        echo "‚úÖ Code Security: ${{ needs.code-security.result }}"
        echo "‚úÖ Dependency Scanning: ${{ needs.dependency-scanning.result }}"
        echo "‚úÖ Container Security: ${{ needs.container-security.result }}"
        echo "‚úÖ Secret Scanning: ${{ needs.secret-scanning.result }}"
        echo ""
        echo "üìä All security checks completed!"
        echo "üîç Check GitHub Security tab for detailed results"
